name: List updates_files on pull request

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  anotherWayToListFiles:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Glob match
        uses: tj-actions/glob@v16
        id: glob
        with:
          files: |
            modules/**
      - name: Run if file exist
        if: ${{ steps.glob.outputs.paths != ''}}
        uses: tj-actions/glob@v16
        id: glob-result-step
        with:
          files: |
            toto/**
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          files: |
            modules/**
      - name: Get files url
        uses: actions/github-script@v6
        id: set-result
        env:
          FILES: ${{steps.changed-files.outputs.all_changed_and_modified_files}}
          SITE_URL: 'http://localhost'
          COMPONENT_NAME: 'bonita'
        with:
          script: |            
            let {FILES,SITE_URL,COMPONENT_NAME}=process.env;            
             const {data: pr} = await github.rest.pulls.get({
                owner: context.repo.owner,
                pull_number: context.issue.number,
                repo: context.repo.repo,
            });
            let files = FILES.split(' ');
            console.log('files => ', files);              
            let urls=[];            
            files.forEach(file => {
             const splitted = file.split('/');
             splitted.shift();
             const pageName = splitted.pop();
             const moduleName = splitted.shift();
             urls.push(`- ${SITE_URL}/${COMPONENT_NAME}/${pr.base.ref}${moduleName === 'ROOT' ? '/' : `/${moduleName}/`}${pageName?.split('.').shift()}`);
            });
            return urls.join('\n');
          result-encoding: string
      - name: Create or update comments
        uses: actions/github-script@v6
        env:
          LINKS: ${{steps.set-result.outputs.result}}
          RENAMED_FILES: ${{steps.changed-files.outputs.renamed_files}}
          HAS_DELETED_FILES: ${{steps.changed-files.outputs.any_deleted}}
        with:
          script: |
            let {LINKS, RENAMED_FILES, HAS_DELETED_FILES} = process.env;
            console.log('RENAMED_FILES => ',RENAMED_FILES === undefined, RENAMED_FILES === null);
            console.log('HAS_DELETED_FILES => ',HAS_DELETED_FILES);
            //Adding deleted or renamed check
            let warningAliasMessage = '';
            if(HAS_DELETED_FILES){
              console.log('if DELETED =>',HAS_DELETED_FILES);
            }
            if(RENAMED_FILES != ''){
              console.log('if RENAMED_FILES =>',RENAMED_FILES);
            }
            if(HAS_DELETED_FILES || RENAMED_FILES != ''){
              warningAliasMessage="\n \n ### :warning: Somes files are deleted or renamed, don\'t forget to add [alias](https://github.com/bonitasoft/bonita-documentation-site/blob/master/docs/content/CONTRIBUTING.adoc#use-alias-to-create-redirects)"
            }

            const HEADER='## Pull request files update :memo:\n\n';
            const preface =
            'In order to merge this pull request, you need to check your updates with the following url.\n\n';

            const availableLinks = `### Url to check: \n ${LINKS}\n\n\n\n`;

            let body =  HEADER + preface + availableLinks + warningAliasMessage;
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                issue_number: context.issue.number,
                repo: context.repo.repo,
            });

            for (const comment of comments) {
              if (comment.body?.startsWith(HEADER)) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  issue_number: context.issue.number,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              };
            }

            await github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: body
            })
          result-encoding: string

