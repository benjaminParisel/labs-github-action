name: List updates_files on pull request

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  anotherWayToListFiles:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          files: |
            modules/**
      - name: Get files url
        uses: actions/github-script@v6
        id: set-result
        env:
          FILES: ${{steps.changed-files.outputs.all_changed_and_modified_files}}
          SITE_URL: 'http://localhost/'
          COMPONENT_NAME: 'bonita'
        with:
          script: |
            let {FILES,SITE_URL,COMPONENT_NAME}=process.env
             const {data: pr} = await github.rest.pulls.get({
                owner: context.repo.owner,
                pull_number: context.issue.number,
                repo: context.repo.repo,
            });
            let files = FILES.split('/')  
            let urls=[];
            console.log('files', files)
            files.forEach(file => {
             const splitted = file.split('/');
             splitted.shift();
             const pageName = splitted.pop();
             const moduleName = splitted.shift();
             urls.push(`- ${SITE_URL}/${COMPONENT_NAME}/${pr.base.ref}${moduleName === 'ROOT' ? '/' : `/${moduleName}/`}${pageName?.split('.').shift()}`);
            });            
            console.log('urls',urls.join('\n'));
            return urls.join('\n');
          result-encoding: string
      - name: Create or update comments
        uses: actions/github-script@v6
        env:
          LINKS: ${{steps.set-result.outputs.result}}
        with:
          script: |
            let {LINKS} = process.env
            const HEADER='## Pull request files update :memo:\n\n';
            const preface =
            'In order to merge this pull request, you need to check your updates with the following url.\n\n';
        
            const availableLinks = `### Url to check: \n ${LINKS}\n\n\n\n`;
        
            let body =  HEADER + preface + availableLinks;
            await github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: body
            })
          result-encoding: string

